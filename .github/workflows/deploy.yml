name : TEAMO 서버 배포
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ develop ]

  push:
    branches: [ develop ]

jobs:
  build-on-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Build only
    steps:
      # GitHub repository 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # yml 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # java build 추가
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        run: ./gradlew bootJar

  deploy-on-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Build & Deploy (PR merge)
    steps:
      # GitHub repository 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # yml 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # java build 추가
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        run: ./gradlew bootJar

      # Docker Buildx 설정 (고급 캐시 지원용)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 이미지 태그 자동 설정
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: hosiki/teamo
          tags: |
            latest

      # Docker 이미지 빌드 + Docker Hub로 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: hosiki/teamo:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=hosiki/teamo:buildcache
          cache-to: type=registry,ref=hosiki/teamo:buildcache,mode=max

      # EC2 SSH 접속을 위한 private key 등록
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # 설정 파일 EC2로 복사
      - name: Copy configuration files to EC2
        run: |
          # 저장소의 설정 파일들을 EC2로 복사
          scp -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${{ secrets.EC2_HOST }}:~/teamo/
          
          # nginx 설정 디렉토리 생성 확인
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "mkdir -p ~/teamo/nginx/conf.d"
          
          # nginx 설정 파일 복사
          scp -o StrictHostKeyChecking=no -r app/nginx/conf.d/* ec2-user@${{ secrets.EC2_HOST }}:~/teamo/nginx/conf.d/

      # EC2에 .env 파일 생성 (GitHub Secrets 기반)
      - name: Generate .env and deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
          mkdir -p ~/teamo

          cat > ~/teamo/.env <<EOL
          SPRING_PROFILES_ACTIVE=prod
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          GITHUB_CLIENT_ID=${{ secrets.CLIENT_GITHUB_ID }}
          GITHUB_CLIENT_SECRET=${{ secrets.CLIENT_GITHUB_SECRET }}
          STORAGE_URL=${{ secrets.STORAGE_URL }}
          STORAGE_BUCKET_NAME=${{ secrets.STORAGE_BUCKET_NAME }}
          STORAGE_KEY=${{ secrets.STORAGE_KEY }}
          FRONT_END_REDIRECT=${{ secrets.FRONT_END_REDIRECT }}
          APP_CORS_ALLOWED_ORIGINS=${{ secrets.APP_CORS_ALLOWED_ORIGINS }}
          EOL
          EOF

      # EC2에서 docker-compose로 서비스 재시작
      - name: Deploy services to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
          cd ~/teamo

          # 디렉토리 구조 확인
          mkdir -p ./nginx/certbot
          mkdir -p ./nginx/www
          
          # 기존 컨테이너 중지
          docker rm -f teamo certbot || true
          
          # 최신 이미지 가져오기
          docker pull hosiki/teamo:latest
          
          # 서비스 시작
          docker-compose up -d
          
          # 불필요한 이미지 정리
          docker image prune -f
          EOF